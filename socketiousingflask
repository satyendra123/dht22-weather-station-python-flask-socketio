#Step-1 app.py
import json
from flask import Flask, render_template, request
from flask_socketio import SocketIO
from random import random
from threading import Lock
from datetime import datetime
from dht22_module import DHT22Module
import board

dht22_module = DHT22Module(board.D18)

thread = None
thread_lock = Lock()

app = Flask(__name__)
app.config["SECRET_KEY"] = "donsky!"
socketio = SocketIO(app, cors_allowed_origins="*")

"""
Background Thread
"""


def background_thread():
    while True:
        temperature, humidity = dht22_module.get_sensor_readings()
        sensor_readings = {
            "temperature": temperature,
            "humidity": humidity,
        }
        sensor_json = json.dumps(sensor_readings)

        socketio.emit("updateSensorData", sensor_json)
        socketio.sleep(3)


"""
Serve root index file
"""


@app.route("/")
def index():
    return render_template("index.html")


"""
Decorator for connect
"""


@socketio.on("connect")
def connect():
    global thread
    print("Client connected")

    with thread_lock:
        if thread is None:
            thread = socketio.start_background_task(background_thread)


"""
Decorator for disconnect
"""


@socketio.on("disconnect")
def disconnect():
    print("Client disconnected", request.sid)


# if __name__ == "__main__":
#     socketio.run(app, port=5000, host="0.0.0.0", debug=True)

#step-2 static/index.css
body {
  background-color: #f5f5f5;
}
.bg-white {
  background-color: #fff;
}
.sidebar {
  background-color: #fff;
}
.box {
  background: #cf1b03;
  width: calc(100% / 2 - 20px);
  color: #fff;
}
.box .box-topic {
  font-size: 20px;
  font-weight: 500;
}
.box .number {
  display: inline-block;
  font-size: 35px;
  margin-top: -6px;
  font-weight: 500;
}

.box .indicator {
  font-size: 48px;
}

#step-3 static/index.js
var temperatureHistoryDiv = document.getElementById("temperature-history");
var humidityHistoryDiv = document.getElementById("humidity-history");

var temperatureGaugeDiv = document.getElementById("temperature-gauge");
var humidityGaugeDiv = document.getElementById("humidity-gauge");

var graphConfig = {
  displayModeBar: false,
  responsive: true,
};

// History Data
var temperatureTrace = {
  x: [],
  y: [],
  name: "Temperature",
  mode: "lines+markers",
  type: "line",
};
var humidityTrace = {
  x: [],
  y: [],
  name: "Humidity",
  mode: "lines+markers",
  type: "line",
};

var temperatureLayout = {
  autosize: true,
  title: {
    text: "Temperature",
  },
  font: {
    size: 14,
    color: "#7f7f7f",
  },
  colorway: ["#B22222"],
  //   width: 450,
  //   height: 260,
  margin: { t: 30, b: 20, l: 30, r: 20, pad: 0 },
};
var humidityLayout = {
  autosize: true,
  title: {
    text: "Humidity",
  },
  font: {
    size: 14,
    color: "#7f7f7f",
  },
  colorway: ["#00008B"],
  //   width: 450,
  //   height: 260,
  margin: { t: 30, b: 20, l: 30, r: 20, pad: 0 },
};
var config = { responsive: true };

Plotly.newPlot(
  temperatureHistoryDiv,
  [temperatureTrace],
  temperatureLayout,
  graphConfig
);
Plotly.newPlot(
  humidityHistoryDiv,
  [humidityTrace],
  humidityLayout,
  graphConfig
);

// Gauge Data
var temperatureData = [
  {
    domain: { x: [0, 1], y: [0, 1] },
    value: 0,
    title: { text: "Temperature" },
    type: "indicator",
    mode: "gauge+number+delta",
    delta: { reference: 30 },
    gauge: {
      axis: { range: [null, 50] },
      steps: [
        { range: [0, 20], color: "lightgray" },
        { range: [20, 30], color: "gray" },
      ],
      threshold: {
        line: { color: "red", width: 4 },
        thickness: 0.75,
        value: 30,
      },
    },
  },
];

var humidityData = [
  {
    domain: { x: [0, 1], y: [0, 1] },
    value: 0,
    title: { text: "Humidity" },
    type: "indicator",
    mode: "gauge+number+delta",
    delta: { reference: 50 },
    gauge: {
      axis: { range: [null, 100] },
      steps: [
        { range: [0, 20], color: "lightgray" },
        { range: [20, 30], color: "gray" },
      ],
      threshold: {
        line: { color: "red", width: 4 },
        thickness: 0.75,
        value: 30,
      },
    },
  },
];

var layout = { width: 350, height: 250, margin: { t: 0, b: 0, l: 0, r: 0 } };

Plotly.newPlot(temperatureGaugeDiv, temperatureData, layout, graphConfig);
Plotly.newPlot(humidityGaugeDiv, humidityData, layout, graphConfig);

// Temperature
let newTempXArray = [];
let newTempYArray = [];
// Humidity
let newHumidityXArray = [];
let newHumidityYArray = [];

// The maximum number of data points displayed on our scatter/line graph
let MAX_GRAPH_POINTS = 12;
let ctr = 0;

function updateBoxes(temperature, humidity) {
  let temperatureDiv = document.getElementById("temperature");
  let humidityDiv = document.getElementById("humidity");

  temperatureDiv.innerHTML = temperature + " C";
  humidityDiv.innerHTML = humidity + " %";
}

function updateGauge(temperature, humidity) {
  var temperature_update = {
    value: temperature,
  };
  var humidity_update = {
    value: humidity,
  };

  Plotly.update(temperatureGaugeDiv, temperature_update);
  Plotly.update(humidityGaugeDiv, humidity_update);
}

function updateCharts(lineChartDiv, xArray, yArray, sensorRead) {
  var today = new Date();
  var time =
    today.getHours() + ":" + today.getMinutes() + ":" + today.getSeconds();
  if (xArray.length >= MAX_GRAPH_POINTS) {
    xArray.shift();
  }
  if (yArray.length >= MAX_GRAPH_POINTS) {
    yArray.shift();
  }
  xArray.push(ctr++);
  yArray.push(sensorRead);

  var data_update = {
    x: [xArray],
    y: [yArray],
  };

  Plotly.update(lineChartDiv, data_update);
}

function updateSensorReadings(jsonResponse) {
  let temperature = jsonResponse.temperature.toFixed(2);
  let humidity = jsonResponse.humidity.toFixed(2);

  updateBoxes(temperature, humidity);

  updateGauge(temperature, humidity);

  // Update Temperature Line Chart
  updateCharts(
    temperatureHistoryDiv,
    newTempXArray,
    newTempYArray,
    temperature
  );
  // Update Humidity Line Chart
  updateCharts(
    humidityHistoryDiv,
    newHumidityXArray,
    newHumidityYArray,
    humidity
  );
}
/*
  SocketIO Code
*/
//   var socket = io.connect("http://" + document.domain + ":" + location.port);
var socket = io.connect();

//receive details from server
socket.on("updateSensorData", function (msg) {
  var sensorReadings = JSON.parse(msg);
  updateSensorReadings(sensorReadings);
});

#step-4 templates/index.html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>DHT22 Weather Station Project</title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65"
      crossorigin="anonymous"
    />
    <link
      href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined"
      rel="stylesheet"
    />
    <script
      src="https://cdn.plot.ly/plotly-2.20.0.min.js"
      charset="utf-8"
    ></script>
    <link
      href="{{url_for('static', filename = 'index.css')}}"
      rel="stylesheet"
    />
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/3.0.4/socket.io.js"
      integrity="sha512-aMGMvNYu8Ue4G+fHa359jcPb1u+ytAF+P2SCb+PxrjCdO3n3ZTxJ30zuH39rimUggmTwmh2u7wvQsDTHESnmfQ=="
      crossorigin="anonymous"
    ></script>
  </head>
  <body>
    <header>
      <!-- Fixed navbar -->
      <nav class="navbar navbar-expand-md navbar-dark fixed-top bg-dark">
        <div class="container-fluid">
          <a class="navbar-brand" href="#">DonskyTech</a>
          <button
            class="navbar-toggler"
            type="button"
            data-bs-toggle="collapse"
            data-bs-target="#navbarCollapse"
            aria-controls="navbarCollapse"
            aria-expanded="false"
            aria-label="Toggle navigation"
          >
            <span class="navbar-toggler-icon"></span>
          </button>
          <div class="collapse navbar-collapse" id="navbarCollapse">
            <ul class="navbar-nav me-auto mb-2 mb-md-0">
              <li class="nav-item">
                <a class="nav-link active" aria-current="page" href="#">Home</a>
              </li>
              <li class="nav-item">
                <a class="nav-link" href="#">About</a>
              </li>
            </ul>
          </div>
        </div>
      </nav>
    </header>
    <div class="container-fluid content mt-5">
      <div class="row">
        <nav
          id="sidebarMenu"
          class="col-md-3 col-lg-2 d-md-block sidebar collapse"
        >
          <div class="sidebar position-sticky pt-3 sidebar-sticky">
            <ul class="nav flex-column">
              <li class="nav-item">
                <a
                  class="nav-link active link-danger"
                  aria-current="page"
                  href="#"
                >
                  <span class="material-symbols-outlined"> dashboard </span>
                  Dashboard
                </a>
              </li>
            </ul>
          </div>
        </nav>
        <div class="col-md-9 ms-sm-auto col-lg-10 px-md-4">
          <div class="row">
            <div
              class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom border-danger"
            >
              <h1 class="h2 text-danger">DHT22 Weather Station Dashboard</h1>
              <div class="row"></div>
            </div>
          </div>
          <div class="row">
            <div
              class="d-flex p-2 justify-content-evenly overview-boxes justify-content-center"
            >
              <div
                class="box d-flex align-items-center justify-content-center rounded-3 p-1 shadow"
              >
                <div class="right-side">
                  <div class="box-topic">Temperature</div>
                  <div class="number" id="temperature">35 C</div>
                </div>
                <span class="indicator material-symbols-outlined"
                  >device_thermostat</span
                >
              </div>
              <div
                class="box d-flex align-items-center justify-content-center rounded-3 p-1 shadow"
              >
                <div class="right-side">
                  <div class="box-topic">Humidity</div>
                  <div class="number" id="humidity">40%</div>
                </div>
                <span class="indicator material-symbols-outlined">
                  humidity_percentage
                </span>
              </div>
            </div>
          </div>
          <div class="row">
            <div class="col-md-12 col-lg-8 bg-white">
              <div class="p-3 border-top border-3 border-danger">
                <div class="row mt-3 gx-5">
                  <div class="col-md-12 col-lg-6 history-divs">
                    <div id="temperature-history"></div>
                  </div>
                  <div class="col-md-12 col-lg-6 history-divs">
                    <div id="humidity-history"></div>
                  </div>
                </div>
              </div>
            </div>
            <div
              class="col-md-12 col-lg-4 d-flex flex-column align-items-center"
            >
              <div
                class="row p-3 bg-light border-top border-3 border-danger bg-white"
              >
                <div id="temperature-gauge"></div>
              </div>
              <div
                class="row p-3 bg-light border-top border-3 border-danger mt-4 bg-white"
              >
                <div id="humidity-gauge" class=""></div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <footer class="footer mt-auto py-3 bg-dark">
      <div class="container text-center">
        <span class="text-white">&copy;2023 www.donskytech.com</span>
      </div>
    </footer>
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4"
      crossorigin="anonymous"
    ></script>
    <script
      type="text/javascript"
      src="{{ url_for('static', filename = 'index.js') }}"
    ></script>
  </body>
</html>

#step-5 dht22_module.py
import adafruit_dht
import time


class DHT22Module:
    def __init__(self, pin):
        self.dht_device = adafruit_dht.DHT22(pin)

    def get_sensor_readings(self):
        while True:
            try:
                # Print the values to the serial port
                temperature_c = self.dht_device.temperature
                temperature_f = temperature_c * (9 / 5) + 32
                humidity = self.dht_device.humidity
                print(
                    "Temp: {:.1f} F / {:.1f} C    Humidity: {}% ".format(
                        temperature_f, temperature_c, humidity
                    )
                )
                return temperature_c, humidity

            except RuntimeError as error:
                # Errors happen fairly often, DHT's are hard to read, just keep going
                print(error.args[0])
                time.sleep(2.0)
                continue
            except Exception as error:
                self.dht_device.exit()
                raise error

#Step-6 reactjs code
import React, { useEffect, useState } from "react";
import io from "socket.io-client";
import Plot from "react-plotly.js";
import "./App.css";

const socket = io.connect("http://localhost:5000");

const MAX_GRAPH_POINTS = 12;

function App() {
  const [temperature, setTemperature] = useState(0);
  const [humidity, setHumidity] = useState(0);
  const [tempData, setTempData] = useState({ x: [], y: [] });
  const [humidityData, setHumidityData] = useState({ x: [], y: [] });

  useEffect(() => {
    socket.on("updateSensorData", (msg) => {
      const sensorReadings = JSON.parse(msg);
      const temperature = sensorReadings.temperature.toFixed(2);
      const humidity = sensorReadings.humidity.toFixed(2);

      setTemperature(temperature);
      setHumidity(humidity);

      updateCharts("temperature", temperature);
      updateCharts("humidity", humidity);
    });

    return () => socket.off("updateSensorData");
  }, []);

  const updateCharts = (type, value) => {
    if (type === "temperature") {
      setTempData((prevData) => {
        const newX = [...prevData.x, prevData.x.length];
        const newY = [...prevData.y, value];
        if (newX.length > MAX_GRAPH_POINTS) {
          newX.shift();
          newY.shift();
        }
        return { x: newX, y: newY };
      });
    } else if (type === "humidity") {
      setHumidityData((prevData) => {
        const newX = [...prevData.x, prevData.x.length];
        const newY = [...prevData.y, value];
        if (newX.length > MAX_GRAPH_POINTS) {
          newX.shift();
          newY.shift();
        }
        return { x: newX, y: newY };
      });
    }
  };

  return (
    <div className="App">
      <h1>Temperature and Humidity Monitor</h1>
      <div className="gauge-container">
        <div className="gauge">
          <h2>Temperature: {temperature} °C</h2>
          <Plot
            data={[
              {
                type: "indicator",
                mode: "gauge+number+delta",
                value: temperature,
                title: { text: "Temperature" },
                gauge: { axis: { range: [null, 50] } },
              },
            ]}
            layout={{ width: 350, height: 250, margin: { t: 0, b: 0 } }}
          />
        </div>
        <div className="gauge">
          <h2>Humidity: {humidity} %</h2>
          <Plot
            data={[
              {
                type: "indicator",
                mode: "gauge+number+delta",
                value: humidity,
                title: { text: "Humidity" },
                gauge: { axis: { range: [null, 100] } },
              },
            ]}
            layout={{ width: 350, height: 250, margin: { t: 0, b: 0 } }}
          />
        </div>
      </div>
      <div className="history-container">
        <div className="history-chart">
          <h2>Temperature History</h2>
          <Plot
            data={[
              {
                x: tempData.x,
                y: tempData.y,
                type: "scatter",
                mode: "lines+markers",
                name: "Temperature",
              },
            ]}
            layout={{
              title: "Temperature",
              autosize: true,
              margin: { t: 30, b: 20, l: 30, r: 20, pad: 0 },
            }}
          />
        </div>
        <div className="history-chart">
          <h2>Humidity History</h2>
          <Plot
            data={[
              {
                x: humidityData.x,
                y: humidityData.y,
                type: "scatter",
                mode: "lines+markers",
                name: "Humidity",
              },
            ]}
            layout={{
              title: "Humidity",
              autosize: true,
              margin: { t: 30, b: 20, l: 30, r: 20, pad: 0 },
            }}
          />
        </div>
      </div>
    </div>
  );
}

export default App;

#step-7 css file
.App {
  font-family: sans-serif;
  text-align: center;
}

.gauge-container {
  display: flex;
  justify-content: space-around;
  margin: 20px;
}

.gauge {
  width: 45%;
}

.history-container {
  display: flex;
  justify-content: space-around;
  margin: 20px;
}

.history-chart {
  width: 45%;
}
