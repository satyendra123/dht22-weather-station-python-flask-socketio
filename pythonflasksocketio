#isme humne python flask socket io ka use kiya hai data send karne ke liye
#step-1
from flask import Flask, render_template, request
from flask_socketio import SocketIO
from random import random
from threading import Lock
from datetime import datetime

"""
Background Thread
"""
thread = None
thread_lock = Lock()

app = Flask(__name__)
app.config['SECRET_KEY'] = 'donsky!'
socketio = SocketIO(app, cors_allowed_origins='*')

"""
Get current date time
"""
def get_current_datetime():
    now = datetime.now()
    return now.strftime("%m/%d/%Y %H:%M:%S")

"""
Generate random sequence of dummy sensor values and send it to our clients
"""
def background_thread():
    print("Generating random sensor values")
    while True:
        dummy_sensor_value = round(random() * 100, 3)
        socketio.emit('updateSensorData', {'value': dummy_sensor_value, "date": get_current_datetime()})
        socketio.sleep(1)

"""
Serve root index file
"""
@app.route('/')
def index():
    return render_template('index.html')

"""
Decorator for connect
"""
@socketio.on('connect')
def connect():
    global thread
    print('Client connected')

    global thread
    with thread_lock:
        if thread is None:
            thread = socketio.start_background_task(background_thread)

"""
Decorator for disconnect
"""
@socketio.on('disconnect')
def disconnect():
    print('Client disconnected',  request.sid)

if __name__ == '__main__':
    socketio.run(app)

#step-2 react js code
import React, { useEffect, useRef, useState } from 'react';
import { Line } from 'react-chartjs-2';
import { io } from 'socket.io-client';

const App = () => {
  const [chartData, setChartData] = useState({
    labels: [],
    datasets: [{
      label: 'Temperature',
      data: [],
      borderColor: 'rgba(255, 99, 132, 1)',
      borderWidth: 3,
    }],
  });

  const socketRef = useRef(null);

  useEffect(() => {
    socketRef.current = io();

    socketRef.current.on('updateSensorData', (msg) => {
      console.log('Received sensorData :: ', msg.date, ' :: ', msg.value);
      setChartData((prevChartData) => {
        const newLabels = [...prevChartData.labels, msg.date];
        const newData = [...prevChartData.datasets[0].data, msg.value];

        // Maintain only the last 10 data points
        if (newLabels.length > 10) {
          newLabels.shift();
          newData.shift();
        }

        return {
          ...prevChartData,
          labels: newLabels,
          datasets: [{
            ...prevChartData.datasets[0],
            data: newData,
          }],
        };
      });
    });

    return () => {
      socketRef.current.disconnect();
    };
  }, []);

  return (
    <div>
      <h2>Real-time Temperature Data</h2>
      <Line data={chartData} />
    </div>
  );
};

export default App;

#step-3 index.js
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';
import 'chart.js/auto';

ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById('root')
);
